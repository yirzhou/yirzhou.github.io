[{"categories":null,"contents":"After today\u0026rsquo;s FSE exam, it officially wraps up my experience in the course Foundations of Software Engineering. As the most important course, or the \u0026ldquo;bread-and-butter\u0026rdquo; of the Software Engineering program, I thought I\u0026rsquo;d summarize what I learned from taking the course, both in terms of the technical and the non-technical aspects.\n   Background in FSE  The course, titled as \u0026ldquo;Foundations of Software Engineering\u0026rdquo;,supposedly teaches the students the fundamentals of the subject. In my opinion, it mostly fulfills this objective because it takes a very hands-on approach. According to the course information website, students will learn to \u0026ldquo;iteratively define requirements, and architect, design, implement, integrate, test, and deploy a solution\u0026rdquo;.\nTo learn those things, we worked as a team to build an emergency situation networking application, which is basically an application that uses standard web technologies. The most important things here are 1) working as a team, and 2) iterately building the application in a pseudo-real-world setting where requirements are defined and we should deliver accordingly.\nWhat makes the course unconventional to me is the following:\n More focus on soft skills Requirements are a somewhat ambiguous (will come back to it later), and Strong focus on team work and communication.  In fact, the effort that went into the development of the course was well documented in this paper by the professors.\nIn terms of the \u0026ldquo;foundations\u0026rdquo; of software engineering that we learned, they span across engineering methods (e.g., iterative, LEAN, agile, SCRUM, kanban, etc.), design patterns, architectural styles, technical debt, and requirement engineering, and so on.\n   Non-technical Lessons   These are the lessons I learned from working with people from different backgrounds and working styles.\n    1. Work distribution  Work distribution across team members can be a difficult. Most of the time, we should optimize and maximize everyone\u0026rsquo;s strength, and allocate the appropriate tasks. However, it has two downsides: 1) It can lead to a person being hyper-focused on just a single aspect of the project all the time and not learning about others\u0026rsquo; work, and 2) inbalance of work distribution depending on the nature of the task (some tasks might be heavy on the frontend, for example).\nTo solve the above issues, learning and adaptation is important. Thus, one must actively take initiatives if he/she wants to get something useful out of the experience. However, to avoid overloading, concerns should be communicated clearly.\n   2. Follow the Instructions  Surprisingly, following instructions is supposed to be straightforward: when creating design documents with UML diagrams, for example, all we need to do is to follow the proper format. However, people tend to not follow the instructions carefully (me included sometimes) and it has led to unnecessary wastes of time. This is particularlly important when we deal with project requirements. If the use case is defined in a way by the user, we should build our product based on that requirement; we should NOT build it how we like it.\n   3. Make Friends  This is possibly the best thing about this course - I genuinely enjoyed the way how they teamed us up. It \u0026ldquo;forces\u0026rdquo; different people who did not knew each other to work together. It makes the graduate community feel tighter and neater. I enjoyed spending time with my folks, and I feel fortunate knowing them.\n   Technical Lessons   These lessons concern the technical aspects of the projects, such as tooling and design.\n    1. Static Analysis  In a big project where the majority of the code is written in JavaScript, you want to \u0026ldquo;help your tools help you\u0026rdquo; by using static analysis tools. We adopted TypeScript from the beginning. The main reason is that the code itself is self-documenting, and its integration with VSCode is superb. By stating types, most exceptions are caught at compile-time. Null exceptions are rare at run-time. It did take a while to learn for some of us, but since it\u0026rsquo;s a superset of JavaScript, a person can learn it incrementally.\n   2. Importance of Design  None of us are as capable as a software architect, so the design of our project was not ideal. However, we did come to the realization early on: consistent implementation depends on a good design. In our case, we used the Factory Method pattern for our core business logic. This allows anyone who comes onboard to implement the logic in a way that is guaranteed to work and be compatible. On the other hand, when we learn something new in class, we\u0026rsquo;d better carry it out in the real world by practicing it.\n   Conclusion  Overall, FSE was a valuable experience to me as someone who has done multiple internships. It was not a perfect experience, but making new friends alone has made it worth my time!\n","date":"Dec 03","permalink":"https://example.com/articles/lessons-learned-fse/","tags":["cmu","software-engineering","grad-school"],"title":"Lessons Learned from a Project-based Course on Software Engineering"},{"categories":null,"contents":"While you are reading this post, I have probably been in quarantine for several days. Yes! I\u0026rsquo;m home, but in a hotel for now.\nI have a lot of ideas that I want to work on. I\u0026rsquo;m not disclosing any of them, but the gist is that by realizing those ideas, I get to experience the same workflow as before but in a different country with some internet censorships. I will have to naturally get through them if I want to work in the same way as before.\n   The problem  The first issue I encountered, right off the bat, was not being able to use Homebrew normally.\nBy default, Homebrew relies on GitHub for their repo distributions. In China, accessing GitHub is extremely slow. I immediately realized this when I attempted to run brew update and it timed out with \u0026ldquo;443\u0026rdquo; errors.\n   The solution  Luckily, Homebrew has a huge Chinese community that has established repo sources in China. All I needed to do was to set the sources to one of the Chinese ones for homebrew, homebrew-core, and homebrew-cask. I\u0026rsquo;m using the ones set up by the University of Science and Technology of China:\n1 2 3 4 5  git -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://mirrors.ustc.edu.cn/brew.git git -C \u0026#34;$(brew --repo homebrew/core)\u0026#34; remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git git -C \u0026#34;$(brew --repo homebrew/cask)\u0026#34; remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git   I also need to change the environment variable HOMEBREW_BOTTLE_DOMAIN by adding this line to my .zshrc:\n1  export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles/   To sum up, I can put the above code into a shell script change_source.sh:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  #!/bin/sh git -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://mirrors.ustc.edu.cn/brew.git git -C \u0026#34;$(brew --repo homebrew/core)\u0026#34; remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git git -C \u0026#34;$(brew --repo homebrew/cask)\u0026#34; remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git if [ $SHELL = \u0026#34;/bin/bash\u0026#34; ]; then # 如果你的是bash echo \u0026#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles/\u0026#39; \u0026gt;\u0026gt;~/.bash_profile source ~/.bash_profile elif [ $SHELL = \u0026#34;/bin/zsh\u0026#34; ]; then # 如果用的shell 是zsh 的话 echo \u0026#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles/\u0026#39; \u0026gt;\u0026gt;~/.zshrc source ~/.zshrc fi   To restore the sources, I have created a neat shell script restore_sources.sh that sets all sources back to GitHub:\n1 2 3 4 5  git -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://github.com/Homebrew/brew.git git -C \u0026#34;$(brew --repo homebrew/core)\u0026#34; remote set-url origin https://github.com/Homebrew/homebrew-core.git git -C \u0026#34;$(brew --repo homebrew/cask)\u0026#34; remote set-url origin https://github.com/Homebrew/homebrew-cask.git      Closing thoughts  That\u0026rsquo;s it for Homebrew - I will likely encounter more issues in the coming days as I spend more time working, so stay alerted for more :smiley:!.\n","date":"May 16","permalink":"https://example.com/articles/homebrew-change-source/","tags":["homebrew","macos","technical","quarantine"],"title":"Quarantine Post: Make Homebrew Work in China"},{"categories":null,"contents":"This is just a quick statement that starting from this moment (i.e. 2021-04-06 11:30:00 PM), I will stop complaining, whining, and expressing any negative energy.\nI have been facing tremendous challenges. Some problems are those others might refer to as \u0026ldquo;first-world\u0026rdquo; problems, but they are definitely not fun to deal with. They have sucked up a significant amount of my time and energy - I\u0026rsquo;m basically burned out at this point. However, I am cognizant of myself bringing my negative energy to others when it was not their fault at all. Perhaps I\u0026rsquo;ve been under too much stress for a while and I did not do a good job coping with it. Regardless, negative energy, in general, should be avoided.\nHence, I decided to post this quickie so that it\u0026rsquo;s public. I apologize for my misbehaviours if they happened to hurt you.\n","date":"Apr 06","permalink":"https://example.com/articles/time-to-change/","tags":["personal"],"title":"Time to Change"},{"categories":null,"contents":"The final term at school has been tough to say the least because:\n I am taking seven courses. I am missing home too much. I have been rejected by three grad schools that I applied to. Physically, I am not in a good shape.  The first two reasons can be coped fairly easily by: studying harder and sleeping less, and distracting myself by reading and watching interesting stuff.\nThe third reason, however, makes me feel like there could be something inherently wrong with myself. I am fully aware that schools are taking many more applications since the pandemic started; another reason could be that as an engineering student, competing with other computer science students is just too difficult. Or, perhaps I said something in my personal statements that those schools did not like. Regardless, this is a problem that I will probably never get an answer to. I see it as the same as applying for jobs where I would just get straightout rejected or ghosted, which I have already gotten used to.\nThe last one, well, could just be due to the stress I have been having which made my body more susceptible. I have had two fevers due to potential food poisoning or allergy. I have been recovering and am feeling much better, but the damage has already been done and slowed me down significantly. I have a lot to catch up.\nAs you can tell, this post is not that positive :sweat_smile:. It\u0026rsquo;s because I\u0026rsquo;m simply stating the facts, and it could get even worse in a few weeks as we need to crank out our capstone project, stay up late for assignments and projects, and prepare for exams. I still have a couple of schools that haven\u0026rsquo;t released their decisions. Even if I get more offers, I still have a \u0026ldquo;first-world\u0026rdquo; problem to solve - decide where I want to go.\nThe funny thing is that this is the first time in my life where I feel \u0026ldquo;lost\u0026rdquo;: the decision that I need to make will completely change my life, and yet I am not sure where I want to be which makes the decision process even harder.\nAm I being too cautious? I don\u0026rsquo;t consider myself a perfectionist because if I were, I would live miserably and burn out, and have no friend or interests because nothing is perfect. Or, is it because now I need to make these decisions on my own and swallow my own pills completely? Am I chickening out?\nOver the next few weeks, I believe that I will sort everything out.\n","date":"Mar 20","permalink":"https://example.com/articles/march-update/","tags":["personal","late_release"],"title":"March Update"},{"categories":null,"contents":"It\u0026rsquo;s been three weeks since my last post. Taking seven courses in a term isn\u0026rsquo;t the easiest thing to do\u0026hellip; I struggled a bit at the beginning of the term because all the tasks and deadlines were just overwhelming.\nHowever, recently, I\u0026rsquo;ve started doing something that I used to do and that\u0026rsquo;s made me feel so good about myself. That is: using a TODO app.\nI know it sounds incredibly boring to pretty much everyone. But, I see it as a tool of gamification for myself. Whenever I check off a task, it just feels so good. The app I used to use a lot was \u0026ldquo;Wunderlist\u0026rdquo;. I decided to use an app to remind myself because assignments plus interviews were just too much for my brain to handle. That app helped get through tons of tasks. This term, that intense feeling seems to come back again and I decided to pick up a TODO app to manage my task.\n\u0026ldquo;Wunderlist\u0026rdquo; doesn\u0026rsquo;t exist any more. It has been re-branded to Microsoft To Do. It still gives me the same kind of vibe, look-and-feel, etc., but using it on a Mac just makes its integration with my Apple Calendar and iPhone that much better. I receive notifications of tasks automatically after creating them in the app.\nMy favorite part about this app is its \u0026ldquo;My Day\u0026rdquo; section, in which I create tasks that I wish to complete for the day.\nI used to be at a point where I didn\u0026rsquo;t know what I should do on a particular day simply due to the sheer volume of tasks; now, I would spend some time every night on planning what I want to do the next day.\nAs I check off them one by one, it just feels good!\n","date":"Jan 30","permalink":"https://example.com/articles/getting-stuff-done/","tags":["tool","tip"],"title":"Getting Stuff Done Feels Good Again"},{"categories":null,"contents":"In this article, I will walkthrough the process of incorporating the \u0026ldquo;new\u0026rdquo; AWS JavaScript SDK in a web application, particularly how to use it directly in browsers.\nI wrote this because I found relevant documentation a bit lacking. Also, the idea can be applied to using TypeScript in browsers in general.\n   Introduction to AWS SDK for JavaScript v3  AWS have recently released Version 3 of the SDK for JavaScript, targeting the following issues of its previous version (V2):\n Modularized packages for individual services (ie. separate packages for S3, EC2, etc., kind of like microservices) New middleware stack     Let\u0026rsquo;s help our tools help us     TypeScript over JavaScript  The most interesting feature to me, is that this new version is written in TypeScript. We all know that it\u0026rsquo;s easy to write type-unsafe and buggy JavaScript due to its dynamic typing system. One component of our final-year design project is in vanilla JavaScript, and people easily get perplexed when looking at the code because they need a lot of time to figure out what certain variables are. For example, suppose that we have a job scheduler:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  class Scheduler { jobQueue; constructor(jobs) { jobs.forEach((job) =\u0026gt; this.jobQueue.push(job)); } addJob(job) { this.jobQueue.push(job); } runJobUntilNone() { while (this.jobQueue.length) { let job = this.jobQueue.pop(); job.run(); } } }   Although the code above is simple, what exactly is a \u0026ldquo;job\u0026rdquo;? It\u0026rsquo;s pretty intuitive to deduce that jobQueue is an array of jobs, but what is a job? Is it a string? Probably not since string doesn\u0026rsquo;t have a run() function. What type is it?\nApart from loose typing, nobody will stop you if you call addJob by passing a number, string, or any other type. What\u0026rsquo;s worse, is that you will only catch the error at run time, which could lead to millions of dollars of loss for your company\u0026hellip;\nTypeScript allows us to add type annotations and any type violation will be caught at compile time by the TypeScript compiler:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  class Job { // some member variables  constructor(args...){//...}  run() {// some logic} } class Scheduler { jobQueue: Job[]; constructor(jobs: Job[]) { jobs.forEach((job) =\u0026gt; this.jobQueue.push(job)); } addJob(job: Job) { this.jobQueue.push(job); } runJobUntilNone() { while (this.jobQueue.length) { let job = this.jobQueue.pop(); job.run(); } } }   The main difference is that we have \u0026ldquo;enforced\u0026rdquo; the type of the elements in jobQueue to be of type Job, which seems insignificant. However, if we pass any other type into the constructor or addJob, TypeScript won\u0026rsquo;t compile due to type errors. Hence, those errors are caught at compile time which will absolutely reduce the chance of run time errors associated with types.\nThere are many other benefits of TypeScript, especially when it comes to development tooling. I use VSCode which comes with TypeScript support out of the box. If we use TypeScript properly and provide decent JSDoc on top of our code, the power of VSCode will be unleashed even more, greatly enhancing our productivity.\n   A note about TypeScript  Browsers only understand JavaScript and cannot directly run TypeScript, so TypeScript needs to be compiled to JavaScript before using it in browsers.\nThis can be easily done by the TypeScript compiler and many other JavaScript module bundlers, such as webpack.\n   Using AWS SDK V3 to fetch from S3     Install TypeScript  We need to install TypeScript as our project development dependency:\n1  npm install --save-dev typescript @types/node   @types/node will provide us with type annotations in VSCode for various libraries.\n   Configure TypeScript compiler  First, we need to configure our TypeScript compiler for our project in a file named tsconfig.js. More information about this file can be found here. Mine looks like the following:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  { \u0026#34;compilerOptions\u0026#34;: { \u0026#34;target\u0026#34;: \u0026#34;ES6\u0026#34;, \u0026#34;module\u0026#34;: \u0026#34;ES6\u0026#34;, \u0026#34;sourceMap\u0026#34;: true, \u0026#34;declaration\u0026#34;: true, \u0026#34;declarationDir\u0026#34;: \u0026#34;./dist\u0026#34;, \u0026#34;moduleResolution\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;typeRoots\u0026#34;: [\u0026#34;node_modules/@types\u0026#34;], \u0026#34;lib\u0026#34;: [\u0026#34;dom\u0026#34;] }, \u0026#34;exclude\u0026#34;: [\u0026#34;node_modules\u0026#34;], \u0026#34;include\u0026#34;: [\u0026#34;src/s3.ts\u0026#34;] }   As you see, we will put our code in src/s3.ts. We also want to generate the associated declaration file under the dist directory. Since we will use @aws-sdk node modules, we should tell the compiler to remember to look into node_modules to find them by setting moduleResolution. Also, the most important options are probably target and module: target specifies what version of JavaScript TypeScript will compile to, and module specifies how we use JavaScript modules in our code. es6 means that we can use the newer import syntax.\n   Code  The best way to learn something new is to practice. Let\u0026rsquo;s write a JavaScript library to be used in browsers that fetchs a file to a S3 bucket. I will go with the AWS Cognito Identity Pool which gives users temporary access to your AWS services, which, in our case, are fetching files to a S3 bucket.\nFirst, let\u0026rsquo;s install the modules we need for fetching from S3:\n1  npm install --save @aws-sdk/client-s3 @aws-sdk/client-cognito-identity @aws-sdk/credential-provider-cognito-identity   We then import them in our code:\n1 2 3  import { S3 } from \u0026#34;@aws-sdk/client-s3\u0026#34;; import { CognitoIdentityClient } from \u0026#34;@aws-sdk/client-cognito-identity\u0026#34;; import { fromCognitoIdentityPool } from \u0026#34;@aws-sdk/credential-provider-cognito-identity\u0026#34;;   Then, we define a function to fetch a file specified by a \u0026ldquo;key\u0026rdquo; from S3. We assume that we know the identity pool ID, the region, and the bucket name. We only require the object key from the user:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  export function fetchFromBucket(key: string) { const region = \u0026#34;ca-central-1\u0026#34;; // Initialize an S3 service with credentials for our identity pool.  const s3 = new S3({ region: region, credentials: fromCognitoIdentityPool({ client: new CognitoIdentityClient({ region: region }), identityPoolId: identityPoolId, }), }); // Fetch and print out the object size  s3.getObject( { Bucket: \u0026#34;my-example-bucket\u0026#34;, Key: key, }, (err, data) =\u0026gt; { if (err) { console.log(`Error when fetching from bucket: ${err.stack}`); } else { console.log(`Data fetched from bucket. Size: [${data.ContentLength}]`); } } ); }   That\u0026rsquo;s our straightforward logic. Our next step is to make it runnable in a browser.\n   Bundle with webpack  I mentioned that TypeScript needs to be compiled to JavaScript to run in browsers. Apart from that, we also need to bundle the AWS modules in use with our library. We can achieve this using webpack, which is a bundler that can bundle any web application asset. The short version of what it does is that it will put all necessary code into one file, which we can use in a browser by including it in an HTML file with a script tag.\nWebpack doesn\u0026rsquo;t understand TypeScript by default, but it has a rich ecosystem and comes with a TypeScript plugin. We also need to bundle JSON files into our code as the AWS SDK uses them, and there\u0026rsquo;s a JSON plugin for that as well. We need to install them as our development dependencies:\n1  npm install --save-dev webpack webpack-cli ts-loader json-loader   We then define a configuration file for webpack, named webpack.config.js:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  const path = require(\u0026#34;path\u0026#34;); module.exports = { target: \u0026#34;web\u0026#34;, entry: { s3: \u0026#34;./src/s3.ts\u0026#34;, }, mode: \u0026#34;development\u0026#34;, module: { rules: [ { test: /\\.ts?$/, use: \u0026#34;ts-loader\u0026#34;, exclude: /node_modules/, }, { test: /\\.json$/, use: \u0026#34;json-loader\u0026#34;, exclude: /node_modules/, }, ], }, resolve: { extensions: [\u0026#34;.ts\u0026#34;, \u0026#34;.js\u0026#34;], }, output: { path: path.resolve(__dirname, \u0026#34;dist\u0026#34;), filename: \u0026#34;[name].js\u0026#34;, library: \u0026#34;[name]\u0026#34;, }, };   The configuration file is easy to understand, and the more important ones are:\n target is how our code will be used. We target at the browsers, hence \u0026ldquo;web\u0026rdquo; is the value. It\u0026rsquo;s also the default value. entry specifies the entry point of our library code, which is our code to fetch from S3. Webpack will start with this file and construct a dependency graph. It will get all other modules it uses, and also the modules used by those modules, and so on. It then \u0026ldquo;bundles\u0026rdquo; them into a single file that contains all the code we need to fetch from S3. mode affects the formatting of our bundled file. development will keep our code in a format that is easy to develop. In contrast, production will minify our code completely by removing all comments, whitespaces, newlines, etc. module specifies the plugins. We are compiling TypeScript to JavaScript and also including JSON files, hence we have two rules for them respectively. output apparently specifies the bundled file. Because it\u0026rsquo;s a library, we need to specify the value for output.library. [name] maps to the keys in entry, so our bundled file will be ./dist/s3.js and the function fetchFromBucket is under s3. To use it, we simply call s3.fetchFromBucket().  Finally, we can add a simple build script in package.json:\n1 2 3 4  \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack\u0026#34; },   To build/bundle our code, simply run\n1 2  npm run build # we can also run \u0026#34;webpack\u0026#34; directly.   This generates ./dist/s3.js which we can directly import into browsers!\n1 2  \u0026lt;script src=\u0026#34;s3.js\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;index.js\u0026#34;\u0026gt;   and in index.js, we can call our function to fetch an object from S3:\n1  s3.fetchFromBucket(\u0026#34;example_object_key\u0026#34;);      One more thing  This seems a rather long process. It takes time initially but the rest of the team will easily benefit from this workflow. Also, I learned about what module bundlers could do and how to create JavaScript libraries for various platforms.\nAlthough I\u0026rsquo;m not into front-end web development, I\u0026rsquo;ve been amazed by its rich tooling and ecosystem :smiley:.\n","date":"Jan 10","permalink":"https://example.com/articles/aws-js-sdk-v3-in-browser/","tags":["aws","javascript","technical","typescript","webpack"],"title":"Using AWS JavaScript SDK v3 in Browsers"},{"categories":null,"contents":"   Background  Welcome to 2021. This is my first article for this year and I want to start with a useful tip for C++ unit testing. Unlike other languages, unit testing in C++ has never been as straightforward. However, googletest (also known as \u0026ldquo;gtest\u0026rdquo;) has been one of the more well-received testing framework in various organizations, so that\u0026rsquo;s what I will focus on.\nWhat makes this article slightly different is that unlike the traditional way of defining an entry point for your testing program (ie. a main() function), I will walk through how NOT to do that - how to use googletest with CMake without defining any entry point.\n   Test case  Let\u0026rsquo;s suppose that I want to test some function. The standard way to define a test case using gtest is the following:\n1 2 3 4 5 6 7 8 9 10 11 12 13  // Component under test #include \u0026lt;myproject/maths.h\u0026gt; // gtest include #include \u0026lt;gtest/gtest.h\u0026gt; using namespace ::testing; TEST(my_function_test, basic) { // Assume that I want to test if myproject::abs()  // returns the correct absolute value of an integer  ASSERT_EQ(myproject::abs(-100), 100); }   As you see, I have defined a test case called my_function_test.basic and it tests if abs returns the correct absolute value - nothing exciting.\nHowever, this is just a function - to run our test case, naturally we want to have some entry point just like any program. There\u0026rsquo;s one way to do it: define a main function somewhere like this:\n1 2 3 4  int main(int argc, char **argv) { ::testing::InitGoogleTest(\u0026amp;argc, argv); return RUN_ALL_TESTS(); }   While this works, there\u0026rsquo;s a neat way to get rid of this main function completely while still being able to run our tests.\n   gtest_main  A main function seems out of place being placed in a directory specifically for test cases. Fortunately, Google agrees with this idea and they\u0026rsquo;ve provided the gtest_main library that gives a basic implementation of main(). It means that we don\u0026rsquo;t need an explicit entry point in our program.\n   CMake  It\u0026rsquo;s simple to use gtest_main with CMake:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  file(GLOB_RECURSE SRCS CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)set(target, my_project.t)add_executable(${target} ${SRCS})find_package(GTest REQUIRED)include(GoogleTest)target_link_libraries(${target} PRIVATE my_project gmock GTest::GTest GTest::Main )gtest_discover_tests(${target})  Or it coule be simpler:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  file(GLOB_RECURSE SRCS CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)set(target, my_project.t)add_executable(${target} ${SRCS})target_link_libraries(${target} PRIVATE my_project gmock gtest gtest_main )gtest_discover_tests(${target})  After building our project, simply run ctest in the build directory and all test cases will run :smiley:.\n","date":"Jan 05","permalink":"https://example.com/articles/googletest-with-cmake/","tags":["gtest","cpp","cmake","technical"],"title":"Googletest with CMake"},{"categories":null,"contents":"It\u0026rsquo;s been hell of a year\u0026hellip; damn!\nI have envisioned a very different year for 2020 back in 2019 - 2020 was supposed to be normal and balanced (again, like all things should be), and yet we had this: a year that might\u0026rsquo;ve already led us into a completely different future. I have come across this thought multiple times: when everything goes back to normal, the perfect term that describes that feeling would be: post-apocalyptic.\nI\u0026rsquo;d like to share my thoughts on this year, some thoughts that I want to remember and can always learn from in the future.\n   Miss  A major theme of 2020 for me has been \u0026ldquo;miss\u0026rdquo;, and others seem to agree with me. We all miss the old days where we were together, physically. Although I have terrible social skills and have found a solution to almost every problem, being unable to sbe with others physically has killed me, and I miss that.\nMore sadly, \u0026ldquo;miss\u0026rdquo; is caused by too MANY farewells in 2020. Too many people have lost their family members and friends because of what has happened or just pure bad luck. I vividly remember the feeling of devastation when reading the news of Kobe passing away.\nThere\u0026rsquo;s plenty to miss.\n   WFH alone  I am one of the many people who have been working from home this year, and it\u0026rsquo;s actually incredible to think about it.\nWhen things got out of control in March, nobody was well prepared: people were panic-shopping EVERYWHERE; the ongoing school term was ended abruptly; and Spring 2020 sucked.\nI was struggling in the beginning of Spring 2020: as an individual who loves \u0026ldquo;order\u0026rdquo;, I was doing a terrible job at managing and scheduling my own tasks, which surprised me. I always felt that my decent self-discipline would come into play seemlessly at a dire time like that, and yet I felt overwhelmed by the high entropy of stuff that kept coming endlessly.\nWhen no one is watching me, or telling me when to do what, I need to think about how to keep myself going. I believe that the best way to achieve that is to make everything feel like normal: except for keeping myself at home, I can do exactly the same things that make myself comfortable, and luckily, it worked. In a nutshell, I tried the following:\n Organize my courses into a calendar just to feel like I had a real schedule; Write all deadlines on a whiteboard placed in a noticeable area; Get a pair of adjustable dumb-bells to not let my body deteriorate; Study with friends via online conferences, most of the times; Wake up early to feel good about myself :blush:.  One important idea that I realized was that: this is just like the theory of evolution. Those who adapt survive. It sounds nerdy to most people but that\u0026rsquo;s how I feel.\n   Surprises  What happened and is still happening must be a surprise to everyone, undoubtedly. However, we should be pleasantly surprised by what we accomplished under these circumstances. In a way, this new style of living and working has inspired us to generate new ideas, try new things (baking, cooking, running), and cultivate new habits.\nI would say that in terms of my personal achievements, 2020 could be the most prolific year, and I might\u0026rsquo;ve never come to this place if it didn\u0026rsquo;t happen.\nWhen everything started going down, I considered it perfect for thinking about what to do in the future because I would probably go on a trip after the finals which I couldn\u0026rsquo;t do any more. The time saving was massive for learning something new. I spent two weeks learning a new web framework and used it to build a simple web portfolio to put on my resumé.\nMore importantly, I didn\u0026rsquo;t want to give up in the job market, which was significantly impacted by the situation. I needed to be \u0026ldquo;outstanding\u0026rdquo; if I wanted to be selected since there was no other way, so I made a systematic plan for studying interviews. I started participating in the LeetCode Monthly Challenge where I get the chance of winning some perk if I complete all 30 questions. I got addicted into it and kept doing it even after I got an internship, which perfectly wrapped up my undergraduate co-op experience. The offer was a surprised, but also somewhat expected: I put much more effort in the preparation than any previous term, and I was lucky to interview with a lot more high-profile companies. I also felt great about every interview, even though some didn\u0026rsquo;t land me offers. Regardless, the one I ended up with was my dream.\nI previously mentioned that Spring 2020 sucked, and it really did. Nobody was well prepared for it, so the entire term was extremely disorganized. However, I appreciate what they were trying to do and deliver to us, and it has gone a lot better based on what I\u0026rsquo;ve heard recently. The most impressive experience was me staying up all night working on a course project that was due the next day. The course was Distributed Computing - a subject that is inherently obstruse, and the project was just too hard. As the time passed 12AM, I decided to take a break by browsing YouTube\u0026hellip; and voilà: folklore, the (first-in-2020) surprise album from Taylor Swift went live. So you probably know what happened next.\nThat\u0026rsquo;s why I think it\u0026rsquo;s among the best things in 2020. Putting the unconventional styles exhibited in this album aside, it was a huge surprise to me that came at the right time. The songs helped me get through the toughest times of the year.\nI said this before: this new style of living has been a source of inspiration for many that lead to those pleasant surprises. If I solely focused on them, 2020 was my favorite year.\n   Post-apocalyptic  I have no idea when our life would go back to normal, and what the world would look like. I sometimes naively wonder if it would look like those \u0026ldquo;post-apocalyptic\u0026rdquo; movies or video games.\nI don\u0026rsquo;t put out new year\u0026rsquo;s resolution because I really can\u0026rsquo;t think of anything specific at present :sweat_smile:. Regardless, my general objective for 2021 is to live better and achieve more. More importantly, I want to learn from 2020 so that I am better prepared for anything like it.\nPeace out, 2020. I\u0026rsquo;ve had a great time with you.\n","date":"Dec 31","permalink":"https://example.com/articles/thoughts-on-2020/","tags":["personal"],"title":"My Thoughts on 2020"},{"categories":null,"contents":" This is one of the most valuable skills that I learned in my current internship. We all love VSCode but this just blew me away.\n    1. Motivation  As a software engineer working with various languages and their ecosystems, it\u0026rsquo;s easy to mess up your development machine when installing dependencies directly on it. Even when we just want to try out a new language, we still need to have that language runtime installed somewhere on our system.\nIdeally, we want to keep it separate such that it will leave the rest of our system intact.\n   2. My story  My current work is entirely C++-based: I write code in C++ and I build my project using CMake and Ninja. I develop on a MacBook Pro but my project targets Linux. C++ on MacOS is different from Linux in terms of their compilers and standard libraries: Apple develops their own toolchains using LLVM and uses Clang as its compiler, while most Linux distributions use GCC. There are subtle differences between their standard libraries as well in terms of supporting the newer C++ standards.\nMost people should never worry about those nuances, but they happened to cause an obstacle for me: my project could only build on Linux because some C++17 features were missing in the Clang standard library (libstdc++).\nFor a while, I was working on a remote development machine using SFTP and the command line. It was fairly unproductive: SFTP heavily depends on how fast my network is, and building and tracing bugs down in the command line require very sharp eyes which I don\u0026rsquo;t have :sweat_smile:. Also, I don\u0026rsquo;t have all the features in VSCode properly set up when developing remotely. In short, it was a real struggle for me.\n   3. How about containerization?  You might have been laughing at my naïveté for a while now: why not working in a Docker container? We can run any operating system and install any dependencies in an isolated environment.\nIn fact, I did try developing inside a container locally, which got rid of SFTP entirely. However, I was still using the clunky CLI and missing the \u0026ldquo;Intellisense\u0026rdquo; and all the other goodies of VSCode.\nIt all changed when I was introduced to Remote-Containers.\nRemote-Containers is a VSCode extension that lets me develop inside a Docker container, using VSCode, as a full-featured development environment. That means that I can enjoy all the features that I need while developing inside a container:\n Full Intellisense and auto-completion with C++ STL CMake extensions Clang-format for code formatting on save  You could read more about it if you are interested, and I highly encourage you to get on board. It essentially allows us to open a container in VSCode as a regular file system, and install our favourite extensions and configure settings in a isolated environment.\n   4. Setup  In the following sections, I will walk through my routine setup for C++ development using VSCode Remote-Containers; however, this skill can be transferred to any other languages or technology stack. I assume that the reader is familiar with container\n   4.1 Pre-requisites   Docker Engine Visual Studio Code     4.2 .devcontainer.json  First, we need to define how VSCode can build and open up a container in a special file: .devcontainer.json. This file can be standalone in your root project directory, or in a separate .devcontainer directory (.devcontainer/devcontainer.json, without the first dot if in the directory).\nWe can set values of plenty of properties that define the locations of docker-compose.yml, Dockerfile, on-init and post-init commands, extensions we wish to install, and many more. For me, I have the following setup:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  { \u0026#34;dockerComposeFile\u0026#34;: [\u0026#34;../docker-compose.yml\u0026#34;, \u0026#34;docker-compose.override.yml\u0026#34;], \u0026#34;initializeCommand\u0026#34;: \u0026#34;mkdir -p debian \u0026amp;\u0026amp; cat */debian/control \u0026gt; debian/control\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;dev-env\u0026#34;, \u0026#34;workspaceFolder\u0026#34;: \u0026#34;/workspace\u0026#34;, \u0026#34;extensions\u0026#34;: [ \u0026#34;ms-vscode.cpptools\u0026#34;, \u0026#34;ms-vscode.cmake-tools\u0026#34;, \u0026#34;twxs.cmake\u0026#34;, \u0026#34;ryanluker.vscode-coverage-gutters\u0026#34;, \u0026#34;pucelle.run-on-save\u0026#34;, \u0026#34;xaver.clang-format\u0026#34; ], \u0026#34;settings\u0026#34;: { \u0026#34;http.proxyStrictSSL\u0026#34;: false, \u0026#34;C_Cpp.default.includePath\u0026#34;: [\u0026#34;/usr/include\u0026#34;, \u0026#34;/workspace/**\u0026#34;], \u0026#34;C_Cpp.default.cStandard\u0026#34;: \u0026#34;c11\u0026#34;, \u0026#34;C_Cpp.default.cppStandard\u0026#34;: \u0026#34;c++17\u0026#34;, \u0026#34;C_Cpp.default.intelliSenseMode\u0026#34;: \u0026#34;gcc-x64\u0026#34;, \u0026#34;C_Cpp.updateChannel\u0026#34;: \u0026#34;Default\u0026#34;, \u0026#34;clang-format.style\u0026#34;: \u0026#34;Google\u0026#34;, \u0026#34;clang-format.fallbackStyle\u0026#34;: \u0026#34;LLVM\u0026#34; } }   I put my .devcontainer.json in the .devcontainer directory, and I have two docker-compose files. Some notable areas are:\n \u0026quot;workspaceFolder\u0026quot;: \u0026quot;/workspace\u0026quot; specifies the workspace directory inside the container. I will be running Ubuntu, and it will locate me in /workspace. I will also mount my project to this directory later. extensions specifies a list of VSCode extensions (C++-specific) to install. Note that those extensions will be separate from our editor extensions on our machine and are exclusive to this container. settings specifies container-specific VSCode settings.     4.3 docker-compose.yml  Docker Compose enables defining and running multi-container Docker applications. I personally think that its main feature is to spin up containers in an order if there are dependencies between them. For the purpose of this setup, I will only spin up one container.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  version:\u0026#34;3.7\u0026#34;services:dev-env:build:context:.dockerfile:dev.Dockerfilevolumes:- .:/workspace:zworking_dir:/workspaceenvironment:- CTEST_OUTPUT_ON_FAILURE=1- GTEST_COLOR=1- CMAKE_GENERATOR=Ninjacommand:sleep infinity  This file has minimal configurations: the most important part is volumes that mounts my project directory to /workspace in the container. I also set some C++-specific environment variables for CMake.\nsleep infinity allows the container to be running instead of exiting immediately which will cause an error.\n   4.4 Dockerfile  The last missing piece is the Dockerfile (in my case, dev.Dockerfile) which defines the build steps of my container:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43  FROMubuntu:latestLABEL description=\u0026#34;Development environment workspace\u0026#34;ENV TZ=Etc RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \u0026amp;\u0026amp; echo $TZ \u0026gt; /etc/timezoneRUN echo \u0026#34;root:docker\u0026#34; | chpasswdRUN apt-get update \u0026amp;\u0026amp; \\  apt-get install -y --force-yes \\  build-essential \\  clang-format \\  devscripts \\  equivs \\  g++ \\  gdb \\  libssl-dev \\  ninja-build \\  openssh-server \\  rsync \u0026amp;\u0026amp; \\  apt-get clean# Copy just the control file.COPY ./debian/control /tmp/debian/control# Install project build dependenciesRUN mk-build-deps -i -t \u0026#34;apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends -y\u0026#34; /tmp/debian/control \u0026amp;\u0026amp; \\  apt-get clean# install quantumWORKDIR/opt/RUN wget https://github.com/bloomberg/quantum/archive/v2.1.tar.gz \u0026amp;\u0026amp; \\  tar -zxvf v2.1.tar.gz \u0026amp;\u0026amp; \\  cd quantum-2.1 \u0026amp;\u0026amp; \\  cmake -Bbuild DQUANTUM_ENABLE_TESTS=ON . \u0026amp;\u0026amp; \\  cd build \u0026amp;\u0026amp; \\  make installEXPOSE22CMD [\u0026#34;/usr/sbin/sshd\u0026#34;, \u0026#34;-D\u0026#34;]  There\u0026rsquo;s not much to say about this file - you can run different runtimes or operating systems of your choice.\n   5. How it feels like  In short, it\u0026rsquo;s awesome.\nI can open my project in a container:\nMy C++ extensions are working as expected - I get Intellisense, CMake, and Clang-format:\nI can build using CMake (non CLI):\nWhat helps me the most, is navigating through errors - I never need to go into the CLI any more:\nI don\u0026rsquo;t use a lot of tools for my C++ development setup, but I have already realized how amazing it is for my productivity. If your tech stack requires more tools (I\u0026rsquo;m aware that Java and JavaScript have much richer ecosystems), you are going to appreciate it more.\n   6. Final thoughts  When I started my internship, I failed to realize its significance in my productivity until much later. This is such an elegant approach to solve dependency issues while retaining all the goodies of VSCode, and it demonstrates perfectly the principle of using the right tools to solve the right problems.\nThere are some imperfections about this setup, but most of them are not related to VSCode but to containerization:\n If you are using a corporate VPN at work, you should consult with your IT department to circumvent it with proxy configurations in order to download VSCode server and extensions. It\u0026rsquo;s not an issue, but definitely something to keep in mind. If the project is huge, you may need to allocate more memory to the container. In my experience, GCC failed during compilation because of the insufficient RAM.  I wish I would know it earlier, but I\u0026rsquo;m still glad that I do now!\n","date":"Dec 15","permalink":"https://example.com/articles/vscode-remote-containers-cpp/","tags":["cpp","cmake","container","vscode","technical"],"title":"Perfect Sandbox Environment for C++ Development"},{"categories":null,"contents":"This is my first ever article on this site, which means that I\u0026rsquo;m just as new to it as you are :slightly_smiling_face:.\n   Some history  I\u0026rsquo;ve had this idea of writing random stuff down for quite a while, and I\u0026rsquo;ve had two failed attempts in the past.\nMy first attempt was a WordPress site with a paid hosting service. It was my very first entry into content management. However, I found WordPress too much overkill for my use as there are a lot of features that I never used. Additionally, I wasn\u0026rsquo;t familiar with PHP, which made customization a bit difficult. After two years, I decided to get rid of it.\nThat leads to my second attempt, which was a site built in ReactJS and hosted on Firebase. It took me just over two weeks to self-teach React and build it during self-quarantine. Firebase provides free hosting which was perfect for getting rid of my old site. I ended up liking React as a frontend framework, and it gave me a taste of frontend development. However, I\u0026rsquo;m never into frontend/UI development, and I felt that it strayed me away from content creation. I did enjoy the learning experience though.\nI think I\u0026rsquo;ve finally found the right tool that allows me to focus on content creation while retaining the high customizability.\n   Why this site exists  I believe in the power of taking notes regardless the significance of the matters. Although I consider myself a decent note-taker, I can still get sloppy at times where I will forget the lessons I\u0026rsquo;ve learned. Writting stuff down helps me recall the happy and sad moments or lessons more effectively.\nSince this tool allows me to focus on the content aspect, I am determined to start a new page, keep it alive and update it regularly. It mainly serves as a personal space for myself, but if you happen to be close to me in real life, I hope it can convey to you what\u0026rsquo;s going on with my life (I don\u0026rsquo;t browse social media often). If you find the stuff here useful, it will make me even happier :smiley:.\n   What to expect  I will write about topics that I\u0026rsquo;m familiar with. Most of the stuff comes from my experience, whether personally, academically or professionally. Therefore, they are heavily opinion-based and could be against yours. In general, they can be categorized into technical and non-technial content.\n   Technical  You can expect stuff about tools, frameworks of, and tips on software development and productivity. I will try to not make those articles look like technical documentation :sweat_smile:.\n   Non-technical  You can expect some personal thoughts, perhaps on the issues of the day, life update, and so on.\nRegardless the level of technicality, I will attach relevant tags to all articles.\nThere we go - I just wrote the first article. I have a lot in mind that I want to share with my future self and you, and thanks for visiting my home.\n","date":"Dec 01","permalink":"https://example.com/articles/a-new-beginning/","tags":["personal"],"title":"A New Beginning"},{"categories":null,"contents":"Hi, my name is Yiren, and I also go by Larry. I am a 4th-year computer engineering student at the University of Waterloo, although I\u0026rsquo;ll be graduating soon in April 2021 :smiley:.\nI consider myself a weird tech nerd: I don\u0026rsquo;t play games (any more) but I know pretty much everything about the latest CPU and GPU releases; I don\u0026rsquo;t own any cutting-edge tech products, but I try to keep myself updated with their unique features. More interestingly, I am drawn towards how tech has been shaping our life psychologically, which ultimately leads to my (future) research interest in Human-computer Interaction.\nMy technical passion lies in building high-performance and reliable software. In my previous internships, I was fortunate to work on data-intensive applications that served critical business missions. I am a firm believer in using the right tools for the right problems. That doesn\u0026rsquo;t mean that I\u0026rsquo;m reluctant to try and adopt new frameworks or tools, but I will always try to convince myself before officially getting on board.\nI started learning piano when I was 5, and I\u0026rsquo;m passionate about classical music. In my opinion, Mozart\u0026rsquo;s sonatas bring me the most joy when I\u0026rsquo;m down, Beethoven has the most epic symphonies, and Liszt takes the crown for having the most glamorous études. I also grew up with western pop and country music. folklore and evermore are among the best things that happened in 2020.\nI also used to make videos about video games, and here are some of them:\n Being by Kevein Brooks - A Novel\u0026rsquo;s Summary Importance of Synchronisation (Counter-Strike Montage) ACTION-PACKED | BF1 Mini-Montage [60fps]  I hope you can find helpful or interesting stuff here :blush:.\n","date":"Dec 01","permalink":"https://example.com/about/","tags":null,"title":"About Me"}]